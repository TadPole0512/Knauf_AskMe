

/* ***************************************************************************************************************************************** */
/* *********** QMS 조회 및 등록 > QMS 출력 : http://localhost:8080/eorder/front/report/qmsReport.lime *********** */


/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\webapp\WEB-INF\views\front\report\qmsReport.jsp *********** */



/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\ctrl\front\FReportCtrl.java *********** */

132    /**
     * qmsReport
     * @작성일 : 2021. 5. 9.
     * @작성자 : an
     */
    @RequestMapping(value="qmsReport" ,method= {RequestMethod.GET,RequestMethod.POST})
    public String qmsReport(@RequestParam Map<String, Object> params, HttpServletRequest req, HttpServletResponse res, LoginDto loginDto, Model model) throws Exception {
        // 내부사용자 웹주문현황  > 별도 권한 설정.
        orderSvc.setParamsForAdminOrderList(params, req, loginDto, model);
        String qmsId = "";
        String qmsIdTxt = null;
        String pageType = null;
        
        
        if(params.get("page_type")!= null) {
            pageType = params.get("page_type").toString();
        }else {
            pageType = "qmsReport";
        }
        
        // 단일 선택 업로드
        if(pageType.equals("qmsReport")) {
            if(params.get("qmsId")!= null) {
                qmsIdTxt = params.get("qmsId").toString();
            }
            qmsId = qmsIdTxt;
            
        } else if(pageType.equals("qmsAllReport")) {
            qmsIdTxt = "";
            List<Map<String, Object>> qmsPopList = orderSvc.getQmsPopList(params);
            for(int i = 0; i < qmsPopList.size(); i++) {
                qmsIdTxt += qmsPopList.get(i).get("QMS_ORD_NO");
                if(i < qmsPopList.size()-1) {
                    qmsIdTxt += ",";
                }
            }
            qmsId = qmsIdTxt;
            
            //정렬조건 오류 방지 초기화
            params.put("r_orderby", null);
        }
        
        int qmsIdSize = qmsId.split(",").length;
        
        List<Map<String, Object>> reportList = new ArrayList<Map<String, Object>>();
        
        Map<String, Object> result = new HashMap<>();
        
        params.put("work", "mod");
        
        for(int i = 0; i < qmsIdSize; i++) {
            
            result = new HashMap<>();
            
         // QMS 시퀀스와 함께 입력된 경우 처리
            if(qmsId.split(",")[i].indexOf("-") > 0) {
                String[] qmsArr = qmsId.split(",")[i].split("-");
                params.put("qmsId", qmsArr[0]);
                params.put("qmsSeq", qmsArr[1]);
            }else {
              //기본 qms 시퀀스 입력
              params.put("qmsSeq",params.get("qmsSeq")!=null?params.get("qmsSeq"):1);
            }
            
            /*
             * 회사 직인 
             */
            Map<String, Object> resMap = configSvc.getConfigList(params);
            //model.addAttribute("configList", resMap);
            result.put("configList", resMap);
            
            /*
             *  MAST
             */
            List<Map<String, Object>> getQmsPopMastList = orderSvc.getQmsPopMastList(params);
            //model.addAttribute("qmsMastList", getQmsPopMastList);
            //result.put("qmsMastList", getQmsPopMastList);
            /*
             *  ITEM
             */
            List<Map<String, Object>> getQmsPopDetlGridList = orderSvc.getQmsPopDetlGridList(params);
            //model.addAttribute("qmsPopDetlGridList", getQmsPopDetlGridList);
            result.put("qmsPopDetlGridList", getQmsPopDetlGridList);
            /*
             *  FIREPROOF CONSTRUCTION TYPE
             */
            List<Map<String, Object>> getQmsFireproofList = orderSvc.getQmsFireproofList(params);
            //model.addAttribute("qmsFireproofList", getQmsFireproofList);
            result.put("qmsFireproofList", getQmsFireproofList);
            
            String FIRETIME_05 = "N";
            String FIRETIME_10 = "N";
            String FIRETIME_15 = "N";
            String FIRETIME_20 = "N";
            String FIRETIME_30 = "N";
            String BEAM_CHECK = "N";
            String PILLAR_CHECK = "N";
            String NONWALL_CHECK = "N";
            String STRUCT_NM = "";
            String Q_RECOG_NUM = "";
            int count = 0;
            for(Map<String, Object> m : getQmsFireproofList) {
                if(m.get("CHK_YN").toString().compareTo("Y") == 0) {
                    switch(m.get("FIRETIME").toString()) {
                        case "0.5":
                            FIRETIME_05 = "Y";
                            break;
                        case "1":
                            FIRETIME_10 = "Y";
                            break;
                        case "1.5":
                            FIRETIME_15 = "Y";
                            break;
                        case "2":
                            FIRETIME_20 = "Y";
                            break;
                        case "3":
                            FIRETIME_30 = "Y";
                            break;
                        default:
                            break;
                    }
                    
                    String fType = m.get("FIREPROOFTYPE").toString();
                    int idx_l = fType.lastIndexOf("(");
                    int idx_r = fType.lastIndexOf(")");
                    String s1 = idx_l<fType.length() ? fType.substring(0, idx_l) : "";
                    String s2 = idx_r<fType.length() ? fType.substring(idx_l+1, idx_r) : "";
                    STRUCT_NM = String.format("%s%s%s", STRUCT_NM, count==0 ? "" : ",", s1);
                    Q_RECOG_NUM = String.format("%s%s%s", Q_RECOG_NUM, count==0 ? "" : ",", s2);
                    count++;
                    
                    if(s1.toUpperCase().contains("BEAM"))
                        BEAM_CHECK="Y";
                    else if(s1.toUpperCase().contains("COLUMN"))
                        PILLAR_CHECK="Y";
                    else if(s1.contains("기둥-3"))
                        PILLAR_CHECK="Y";
                    else 
                        NONWALL_CHECK="Y";
                }
            }
            
            if(getQmsPopMastList.size() > 0) {     
                Map<String, Object> map = getQmsPopMastList.get(0);
                map.put("FIRETIME_05", FIRETIME_05);
                map.put("FIRETIME_10", FIRETIME_10);
                map.put("FIRETIME_15", FIRETIME_15);
                map.put("FIRETIME_20", FIRETIME_20);
                map.put("FIRETIME_30", FIRETIME_30);
                map.put("STRUCT_NM", STRUCT_NM);
                map.put("Q_RECOG_NUM", Q_RECOG_NUM);
                map.put("BEAM_CHECK", BEAM_CHECK);
                map.put("PILLAR_CHECK", PILLAR_CHECK);
                map.put("NONWALL_CHECK", NONWALL_CHECK);
            }
            
            result.put("qmsMastList", getQmsPopMastList);
            
            reportList.add(result);
            
        }
        
        model.addAttribute("reportList", reportList);
        
        return "front/report/qmsReport";
    }






/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\svc\OrderSvc.java *********** */


2336    /**
     * Get QMS getQmsPopEmailGridList.
     * @작성일 : 2020. 5. 4.
     * @작성자 : jsh
     */
    public List<Map<String, Object>> getQmsPopList(Map<String, Object> params){
        Map<String, Object> resMap = new HashMap<>();
        
        String where = Converter.toStr(params.get("where"));
        
        String r_ordersdt = Converter.toStr(params.get("r_ordersdt")); // 주문일자 검색 시작일.
        String r_orderedt = Converter.toStr(params.get("r_orderedt")); // 주문일자 검색 종료일.
        String r_actualshipsdt = Converter.toStr(params.get("r_actualshipsdt")); // 출고일자 검색 시작일.
        String r_actualshipedt = Converter.toStr(params.get("r_actualshipedt")); // 출고일자; 검색 종료일.
        if(!StringUtils.equals("", r_ordersdt)) r_ordersdt = r_ordersdt.replaceAll("-", "");
        if(!StringUtils.equals("", r_orderedt)) r_orderedt = r_orderedt.replaceAll("-", "");
        if(!StringUtils.equals("", r_actualshipsdt)) r_actualshipsdt = r_actualshipsdt.replaceAll("-", "");
        if(!StringUtils.equals("", r_actualshipedt)) r_actualshipedt = r_actualshipedt.replaceAll("-", "");

        String rl_salesrepnm = Converter.toStr(params.get("rl_salesrepnm")); // 영업사원
        String rl_orderno = Converter.toStr(params.get("rl_orderno")); // 어다반허        
        String r_custcd = Converter.toStr(params.get("r_custcd")); // 거래처
        String r_shiptocd = Converter.toStr(params.get("r_shiptocd")); // 납품처
        
        params.put("r_ordersdt", r_ordersdt);
        params.put("r_orderedt", r_orderedt);
        params.put("r_actualshipsdt", r_actualshipsdt);
        params.put("r_actualshipedt", r_actualshipedt);
        params.put("rl_salesrepnm", rl_salesrepnm);
        params.put("rl_orderno", rl_orderno);
        params.put("r_custcd", r_custcd);
        params.put("r_shiptocd", r_shiptocd);

        // QMS 상태 조회
        String wherebody_status = "";
        String qms_status  = params.get("qms_status") !=null?params.get("qms_status").toString():"";
        String qms_status2 = params.get("qms_status2")!=null?params.get("qms_status2").toString():"";
        String qms_status3 = params.get("qms_status3")!=null?params.get("qms_status3").toString():"";
        
        //QMS 사전입력 여부
        String qms_preyn   = params.get("qms_preyn")!=null?params.get("qms_preyn").toString():"";
        
        if (!qms_status.equals("ALL")) {
            // QMS 생성 미완료
            if(qms_status.equals("N")) {
                wherebody_status += "SF_GETQMSID(ORDERNO,LINE_NO) IS NULL";
            }
            // QMS 생성완료
            if(qms_status.equals("Y")) {
                if(wherebody_status.length() > 1) {
                    wherebody_status+= " OR ";
                }
                wherebody_status += "SF_GETQMSID(ORDERNO,LINE_NO) IS NOT NULL";
            }
        }
        
        if (!qms_status2.equals("ALL")) {
            // MAIL 발송 미완료
            if(qms_status2.equals("N")) {
                if(wherebody_status.length() > 1) {
                    wherebody_status+= " AND ";
                }
                wherebody_status += "SF_GETMAILYN(ORDERNO,LINE_NO) = 'N' ";
            }
            
            // MAIL 발송완료
            if(qms_status2.equals("Y")) {
                if(wherebody_status.length() > 1) {
                    wherebody_status+= " AND ";
                }
                wherebody_status += "SF_GETMAILYN(ORDERNO,LINE_NO) = 'Y' ";
            }
        }
        
        if (!qms_status3.equals("ALL")) {
            // QMS 회신 미완료
            if(qms_status3.equals("N")) {
                if(wherebody_status.length() > 1) {
                    wherebody_status+= " AND ";
                }
                wherebody_status += "SF_GETFILEYN(ORDERNO,LINE_NO) = 'N' ";
            }
            
            // QMS 회신완료
            if(qms_status3.equals("Y")) {
                if(wherebody_status.length() > 1) {
                    wherebody_status+= " AND ";
                }
                wherebody_status += "SF_GETFILEYN(ORDERNO,LINE_NO) = 'Y' ";
            }
        }
        
        if (!qms_preyn.equals("ALL")) {
            // QMS 사전입력
            if(qms_preyn.equals("Y")) {
                if(wherebody_status.length() > 1) {
                    wherebody_status+= " AND ";
                }
                wherebody_status += "Sf_getpreorderyn(SO.cust_po) = 'Y' ";
            }
            
            // QMS 사후입력건
            if(qms_preyn.equals("N")) {
                if(wherebody_status.length() > 1) {
                    wherebody_status+= " AND ";
                }
                wherebody_status += "Sf_getpreorderyn(SO.cust_po) = 'N' ";
            }
        }
        
        if(!qms_status.equals("ALL") || !qms_status2.equals("ALL") || !qms_status3.equals("ALL") || !qms_preyn.equals("ALL")) {
            params.put("wherebody_status", wherebody_status);
        }
        
        System.out.println(params);
        int totalCnt = qmsOrderDao.cnt(params);
        System.out.println(totalCnt);

        // End.
        
        String r_orderby = "";
        String sidx = Converter.toStr(params.get("sidx")); //정렬기준컬럼
        String sord = Converter.toStr(params.get("sord")); //내림차순,오름차순
        r_orderby = sidx + " " + sord;
    //  2024-10-16 hsg 별칭 오류가 나서 수정. SO -> XX)
        if(StringUtils.equals("", sidx)) { r_orderby = "XX.ORDERNO DESC, XX.CUST_PO DESC "; } //디폴트 지정
        
        params.put("r_orderby", r_orderby);
        
        return qmsOrderDao.getQmsPopList(params);
    }




/* ***********  int totalCnt = qmsOrderDao.cnt(params); *********** */

/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\dao\QmsOrderDao.java *********** */

25	public int cnt(Map<String, Object> svcMap) {
		return sqlSession.selectOne("eorder.o_qmsorder.cnt", svcMap);
	}



/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\resources\sql\mssql\o_qmsorder.xml *********** */


38	<select id="cnt" parameterType="hashmap" resultType="int">
	/* eorder.o_qmsorder.cnt */
		SELECT COUNT(*)
		FROM qms_salesorder SO
		LEFT JOIN O_ITEM_NEW OIN 
			ON OIN.ITEM_CD = SO.ITEM_CD 
			/*2024-09-30 hsg LINE_TY에 'Y'값이 없어 죠회가 되지 않아. LEFT JOIN 시 조건을 걸었음 */
			and OIN.LINE_TY = 'Y'
		<where>
			/*2024-09-30 hsg LINE_TY에 'Y'값이 없어 죠회가 되지 않아. LEFT JOIN 시로 취치를 옮김 */
			/* AND OIN.LINE_TY = 'Y' */
			1 = 1
			<if test="wherebody_status != null and wherebody_status != '' ">
				${wherebody_status}
			</if>
			<!-- 2024-10-22 hsg 구분방법은 O_ITEM_NEW.SALES_CD3 항목의 값이 아래 목록에 해당하는 품목만 대상으로 합니다
			QMS 대상 품목 기준값 : 'DAP11400', 'DAP11500', 'DAP11600', 'DAP11700', 'DAP12400', 'DAP12500', 'DAP12800', 'DAP12900', 'DAP13000' -->
			AND		OIN.SALES_CD3 IN ('DAP11400', 'DAP11500', 'DAP11600', 'DAP11700', 'DAP12400', 'DAP12500', 'DAP12800', 'DAP12900', 'DAP13000')
			<if test="r_ordersdt != null and r_ordersdt != '' ">AND SO.ORDER_DT <![CDATA[>=]]> #{r_ordersdt}</if>
			<if test="r_orderedt != null and r_orderedt != '' ">AND SO.ORDER_DT <![CDATA[<=]]> #{r_orderedt}</if>
			<if test="r_actualshipsdt != null and r_actualshipsdt != '' ">AND SO.ACTUAL_SHIP_DT <![CDATA[>=]]> #{r_actualshipsdt}</if>
			<if test="r_actualshipedt != null and r_actualshipedt != '' ">AND SO.ACTUAL_SHIP_DT <![CDATA[<=]]> #{r_actualshipedt}</if>
			<if test="rl_salesrepnm != null and rl_salesrepnm != '' ">
				AND SO.SALESREP_NM LIKE '%' + #{rl_salesrepnm} + '%'
			</if>
			<if test="rl_orderno != null and rl_orderno != '' ">AND SO.ORDERNO LIKE '%' + #{rl_orderno} + '%' </if>
			<if test="r_custcd != null and r_custcd != '' ">AND SO.CUST_CD  = #{r_custcd}</if>
			<if test="r_shiptocd != null and r_shiptocd != '' ">AND SO.SHIPTO_CD = #{r_shiptocd}</if>
			<!-- 관리자 권한에 따른 조건절 -->
 			
 			<if test="r_adminauthority != null and r_adminauthority != '' ">
 				<if test='"AD".equals(r_adminauthority)'>
 				</if>
 				<if test='"CS".equals(r_adminauthority)'>
 					AND SO.SALESREP_CD IN (SELECT SALESUSERID FROM O_CSSALESMAP WHERE CSUSERID = #{r_adminuserid})
 				</if>
 				<if test='"SH".equals(r_adminauthority) or "SM".equals(r_adminauthority) or "SR".equals(r_adminauthority)'>
 					<if test='"SH".equals(r_adminauthority)'>
 						AND SO.SALESREP_CD IN (SELECT USERID FROM O_USER WHERE USER_CATE2 = #{r_adminuserid})
 					</if>
 					<if test='"SM".equals(r_adminauthority)'>
 						AND SO.SALESREP_CD IN (SELECT USERID FROM O_USER WHERE USER_CATE3 = #{r_adminuserid})
 					</if>
 					<if test='"SR".equals(r_adminauthority)'>
 						AND SO.SALESREP_CD = #{r_adminuserid}
 					</if>
 				</if>
 				<if test='"MK".equals(r_adminauthority)'>
 					
 				</if>
 			</if>
 			<!-- End. -->
		</where>
	</select>






/* *********** qmsOrderDao.getQmsPopList(params); *********** */

/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\dao\QmsOrderDao.java *********** */

162    public List<Map<String, Object>> getQmsPopList(Map<String, Object> svcMap) {
        return sqlSession.selectList("eorder.o_qmsorder.getQmsPopList", svcMap);
    }




/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\resources\sql\mssql\o_qmsorder.xml *********** */

953	<select id="getQmsPopList" parameterType="hashmap" resultType="hashmap">
	/* eorder.o_qmsorder.getQmsPopList */
	SELECT RANK() OVER(ORDER BY QMS_ORD_NO) AS RNUM
		  ,XX.*
	  FROM (SELECT A.QMS_ID+'-'+A.QMS_SEQ AS QMS_ORD_NO
	      ,A.QMS_ID
	      ,A.QMS_SEQ
	      ,C.QMS_FILE_ORG_NM
	      ,C.QMS_FILE_NM
	      ,C.QMS_FILE_ID
	      ,C.QMS_FILE_EXT
	      ,C.QMS_FILE_TYPE
	      ,A.SHIPTO_NM
	      ,CASE WHEN (SELECT COUNT(*) FROM (SELECT D.QMS_ID,D.ORDERNO FROM QMS_ORD_DETL D GROUP BY D.QMS_ID,D.ORDERNO)DD WHERE DD.QMS_ID = A.QMS_ID) > 1 THEN 'N' ELSE 'Y' END AS QMS_SPLIT_YN
	      ,B.CUST_NM
	      ,B.ADD1 +' '+ B.ADD2 + B.ADD3 + B.ADD4 AS CUST_ADDR
	      ,dbo.SF_GETQMSBIZNO(B.TAX_ID) AS CUST_BIZ_NO
	      ,B.ZIP_CD
	      ,B.SALESREP_CD
	      ,B.SALESREP_NM
	      ,B.TEAM_CD
	      ,B.TEAM_NM
	      ,B.MAILING_NM
	      ,(SELECT MM.SHIPTOREP_NM
	          FROM (
	        SELECT ROW_NUMBER() OVER (ORDER BY M.CREATETIME DESC) AS R1
	              ,M.*
	          FROM QMS_ORD_MAIL M
	           )MM
	       WHERE MM.QMS_ID = A.QMS_ID
	       AND MM.QMS_SEQ  = A.QMS_SEQ
	       AND MM.R1 = 1) AS SHIPTOREP_NM
	      ,ISNULL((SELECT MM.SHIPTO_EMAIL
	          FROM (
	        SELECT ROW_NUMBER() OVER (ORDER BY M.CREATETIME DESC) AS R1
	              ,M.*
	          FROM QMS_ORD_MAIL M
	           )MM
	       WHERE MM.QMS_ID = A.QMS_ID
	       AND MM.QMS_SEQ  = A.QMS_SEQ
	       AND MM.R1 = 1),A.SHIPTO_EMAIL) AS SHIPTO_EMAIL
	       ,(SELECT CONVERT(VARCHAR, MM.CREATETIME, 120) AS SEND_DT
	          FROM (
	        SELECT ROW_NUMBER() OVER (ORDER BY M.CREATETIME DESC) AS R1
	              ,M.*
	          FROM QMS_ORD_MAIL M
	           )MM
	       WHERE MM.QMS_ID = A.QMS_ID
	       AND MM.QMS_SEQ  = A.QMS_SEQ
	       AND MM.R1 = 1) AS SEND_DT
	 FROM
	 (SELECT QMS_ID,QMS_SEQ,CUST_CD,SHIPTO_NM,SHIPTO_EMAIL
	  FROM
	(SELECT B.*
	   FROM QMS_ORD_DETL A
	       ,QMS_ORD_MAST B
	       ,(SELECT * FROM QMS_SALESORDER SO
	       <where>
			<if test="wherebody_status != null and wherebody_status != '' ">
				${wherebody_status}
			</if>
		
			<if test="r_ordersdt != null and r_ordersdt != '' ">AND SO.ORDER_DT <![CDATA[>=]]> #{r_ordersdt}</if>
			<if test="r_orderedt != null and r_orderedt != '' ">AND SO.ORDER_DT <![CDATA[<=]]> #{r_orderedt}</if>
			<if test="r_actualshipsdt != null and r_actualshipsdt != '' ">AND SO.ACTUAL_SHIP_DT <![CDATA[>=]]> #{r_actualshipsdt}</if>
			<if test="r_actualshipedt != null and r_actualshipedt != '' ">AND SO.ACTUAL_SHIP_DT <![CDATA[<=]]> #{r_actualshipedt}</if>
			<if test="rl_salesrepnm != null and rl_salesrepnm != '' ">
				AND SO.SALESREP_NM LIKE '%' + #{rl_salesrepnm} + '%'
				<!-- AND SO.SALESREP_NM LIKE '%' + #{rl_salesrepnm} + '%' -->
			</if>
			<if test="rl_orderno != null and rl_orderno != '' ">AND SO.ORDERNO LIKE '%' + #{rl_orderno} + '%' </if>
			<if test="r_custcd != null and r_custcd != '' ">AND SO.CUST_CD  = #{r_custcd}</if>
			<if test="r_shiptocd != null and r_shiptocd != '' ">AND SO.SHIPTO_CD = #{r_shiptocd}</if>
			<!-- 관리자 권한에 따른 조건절 -->
 			
 			<if test="r_adminauthority != null and r_adminauthority != '' ">
 				<if test='"AD".equals(r_adminauthority)'>
 				</if>
 				<if test='"CS".equals(r_adminauthority)'>
 					AND SO.SALESREP_CD IN (SELECT SALESUSERID FROM O_CSSALESMAP WHERE CSUSERID = #{r_adminuserid})
 				</if>
 				<if test='"SH".equals(r_adminauthority) or "SM".equals(r_adminauthority) or "SR".equals(r_adminauthority)'>
 					<if test='"SH".equals(r_adminauthority)'>
 						AND SO.SALESREP_CD IN (SELECT USERID FROM O_USER WHERE USER_CATE2 = #{r_adminuserid})
 					</if>
 					<if test='"SM".equals(r_adminauthority)'>
 						AND SO.SALESREP_CD IN (SELECT USERID FROM O_USER WHERE USER_CATE3 = #{r_adminuserid})
 					</if>
 					<if test='"SR".equals(r_adminauthority)'>
 						AND SO.SALESREP_CD = #{r_adminuserid}
 					</if>
 				</if>
 				<if test='"MK".equals(r_adminauthority)'>
 					
 				</if>
 			</if>
 			<!-- End. -->
		</where>
		)SO
	  WHERE A.QMS_ID = B.QMS_ID
	    AND A.QMS_SEQ = B.QMS_SEQ
	    AND A.ORDERNO = SO.ORDERNO
	    AND A.LINE_NO = SO.LINE_NO
	    <!-- AND A.CUST_PO = SO.CUST_PO -->
	    AND A.DELETEYN = 'N'
	    AND B.DELETEYN = 'N'
	    ) XX
	 GROUP BY XX.QMS_ID,QMS_SEQ, XX.CUST_CD, XX.SHIPTO_NM, XX.SHIPTO_EMAIL)A
	, O_CUSTOMER B
	,(SELECT * FROM (SELECT RANK() OVER(PARTITION BY QMS_ID,QMS_SEQ ORDER BY QMS_FILE_ID DESC) AS R1
	    ,F.* FROM QMS_ORD_FILE F)F WHERE F.R1 = 1) C
	WHERE A.QMS_ID  = C.QMS_ID
	  AND A.QMS_SEQ = C.QMS_SEQ
	  AND A.CUST_CD = B.CUST_CD
	   <if test="qmsIdArr != null and qmsIdArr != ''">
	   AND A.QMS_ID+'-'+A.QMS_SEQ IN
        <foreach collection="qmsIdArr" item="arr" index="index"  open="(" close=")" separator=",">
            #{arr}
        </foreach>
	   </if>
	   <if test="qmsIdToDown != null and qmsIdToDown != ''">
	   AND A.QMS_ID+'-'+A.QMS_SEQ IN
	    <foreach collection="qmsIdToDown" item="arr2" index="index"  open="(" close=")" separator=",">
            #{arr2}
        </foreach>
	   </if>
       )XX
	</select>










/* *********** 회사 직인 : Map<String, Object> resMap = configSvc.getConfigList(params); *********** */

/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\svc\ConfigSvc.java *********** */


55	/**
	 * 환경설정 리스트 가져오기
	 * @param params
	 */
	public Map<String, Object> getConfigList(Map<String,Object> params) {
		Map<String, Object> resMap = new HashMap<>();
		List<Map<String, Object>> configList = configDao.list( params );
		
		for( Map<String, Object> config : configList ){
			resMap.put( Converter.toStr( config.get("CF_ID") ), config.get("CF_VALUE") );
		}
		return resMap;
	}




/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\dao\ConfigDao.java *********** */


19	public List<Map<String, Object>> list(Map<String, Object> svcMap){
		return sqlSession.selectList("eorder.config.list", svcMap);
	}






/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\resources\sql\mssql\config.xml *********** */


5	<select id="list" parameterType="hashmap" resultType="hashmap">
		SELECT * FROM (
			SELECT ROW_NUMBER() OVER(
			<choose>
				<when test = " r_orderby != null and r_orderby != '' ">ORDER BY ${r_orderby}</when>
				<otherwise>ORDER BY (SELECT 1)</otherwise>
			</choose>
			) AS ROWNUM
			, XX.* 
		FROM (
			SELECT * FROM CONFIG 
			<where>
				<if test="r_cfid != null and r_cfid != ''">AND CF_ID = #{r_cfid}</if>
				<if test="ri_cfid != null and ri_cfid != ''">
					AND CF_ID IN <foreach collection="ri_cfid" item="cf_id" separator="," open="(" close=")">#{cf_id}</foreach>
				</if>
			</where>
			) XX  
		) S
		<where>
			<if test="r_endrow != null and r_endrow != '' and r_startrow != null and r_startrow != ''" >	
				ROWNUM BETWEEN #{r_startrow} AND #{r_endrow}
			</if>
		</where>	
	</select>




/* *********** MAST : List<Map<String, Object>> getQmsPopMastList = orderSvc.getQmsPopMastList(params); *********** */


/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\ctrl\front\FReportCtrl.java *********** */


2180    /**
     * QMS 오더 신규 입력 목록
     * @작성일 : 2021. 5. 3.
     * @작성자 : jsh
     */
    public List<Map<String, Object>> getQmsPopMastList(Map<String, Object> params){
        
        List<Map<String, Object>> qmsPopList = qmsOrderDao.getQmsPopMastList(params);
        return qmsPopList;





/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\dao\QmsOrderDao.java *********** */


126    public List<Map<String, Object>> getQmsPopMastList(Map<String, Object> svcMap) {
        return sqlSession.selectList("eorder.o_qmsorder.getQmsPopMastList", svcMap);
    }



/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\resources\sql\mssql\o_qmsorder.xml *********** */


731	<select id="getQmsPopMastList" parameterType="hashmap" resultType="hashmap">
		/* eorder.o_qmsorder.getQmsPopMastList */
		SELECT A.* 
		      ,CASE WHEN (SELECT COUNT(*) FROM (SELECT QMS_ID,ORDERNO FROM QMS_ORD_DETL GROUP BY QMS_ID,ORDERNO) Q WHERE Q.QMS_ID = A.QMS_ID) > 1 THEN 'N' ELSE 'Y' END AS QMS_SPLIT_YN
		      ,B.CUST_NM
		      <!-- 2024-10-24 HSG QMS 내화구조 품질관리서 수정. ,B.ADD1 +' '+ B.ADD2 + B.ADD3 + B.ADD4 AS CUST_ADDR -->
		      , B.ADD1 AS CUST_ADDR
		      ,dbo.SF_GETQMSBIZNO(B.TAX_ID) AS CUST_BIZ_NO
		      ,B.ZIP_CD
		      ,B.SALESREP_CD
		      ,B.SALESREP_NM
		      ,B.TEAM_CD
		      ,B.TEAM_NM
		      ,B.MAILING_NM
		      ,dbo.SF_GETQMSACTIVEYN(QMS_ID) AS ACTIVEYN
		  FROM QMS_ORD_MAST A
		 LEFT JOIN O_CUSTOMER B ON A.CUST_CD = B.CUST_CD
		 WHERE A.QMS_ID = #{qmsId}
		    <if test="work != null and work.equals( 'mod' )">
		    AND A.QMS_SEQ = #{qmsSeq}
		    </if>
		    <if test="work != null and work.equals( 'split' )">
		    AND A.DELETEYN <![CDATA[ <> ]]> 'Y'
		    </if>
		    <if test="work != null and work.equals( 'write' )">
		    AND A.DELETEYN <![CDATA[ <> ]]> 'Y'
		    </if>
		    <if test="work == null">
		    AND A.DELETEYN = 'N'
		    </if>
		    <!-- AND DELETEYN = 'N' -->
	</select>






/* *********** ITEM : List<Map<String, Object>> getQmsPopDetlGridList = orderSvc.getQmsPopDetlGridList(params); *********** */


/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\svc\OrderSvc.java *********** */


187    /**
     * Get QMS getQmsPopDetlGridList.
     * @작성일 : 2020. 5. 4.
     * @작성자 : jsh
     */
    public List<Map<String, Object>> getQmsPopDetlGridList(Map<String, Object> svcMap){
        return qmsOrderDao.getQmsPopDetlGridList(svcMap);
    }




/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\dao\QmsOrderDao.java *********** */


21	public List<Map<String, Object>> getQmsPopDetlGridList(Map<String, Object> svcMap) {
	    return sqlSession.selectList("eorder.o_qmsorder.getQmsPopDetlGridList", svcMap);
	}



/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\resources\sql\mssql\o_qmsorder.xml *********** */


807	<select id="getQmsPopDetlGridList" parameterType="hashmap" resultType="hashmap">
		/* eorder.o_qmsorder.getQmsPopDetlGridList */
		SELECT /*ROWNUM RR,*/ XX.* ,B.QMS_ID, B.QMS_SEQ ,B.QMS_REMARK ,B.QMS_DETL_ID ,B.QMS_ID +'-'+ CONVERT(VARCHAR, B.QMS_SEQ) AS QMS_ORD_NO
		        ,(SELECT CASE WHEN COUNT(Q.QMS_ORD_QTY) > 0 THEN SUM(Q.QMS_ORD_QTY) ELSE 0 END 
					  FROM QMS_ORD_DETL Q , QMS_ORD_MAST M
					 WHERE Q.QMS_ID = M.QMS_ID AND Q.QMS_SEQ = M.QMS_SEQ AND Q.DELETEYN = 'N' AND M.DELETEYN = 'N'
					   AND Q.ORDERNO = XX.ORDERNO AND Q.LINE_NO = XX.LINE_NO AND Q.ITEM_CD = XX.ITEM_CD AND Q.LOTNO = XX.LOTN ) AS QMS_ORD_BALANCE
                 ,CASE WHEN ISNULL(B.QMS_ORD_QTY,0) = 0 
                      THEN XX.ORDER_QTY - (SELECT CASE WHEN COUNT(Q.QMS_ORD_QTY) > 0 THEN SUM(Q.QMS_ORD_QTY) ELSE 0 END 
											  FROM QMS_ORD_DETL Q , QMS_ORD_MAST M
											 WHERE Q.QMS_ID = M.QMS_ID AND Q.QMS_SEQ = M.QMS_SEQ AND Q.DELETEYN = 'N' AND M.DELETEYN = 'N'
											   AND Q.ORDERNO = XX.ORDERNO AND Q.LINE_NO = XX.LINE_NO AND Q.ITEM_CD = XX.ITEM_CD AND Q.LOTNO = XX.LOTN )
                      ELSE B.QMS_ORD_QTY END AS QMS_ORD_QTY
		        ,CASE WHEN (SELECT COUNT(*) FROM (SELECT QMS_ID,ORDERNO FROM QMS_ORD_DETL GROUP BY QMS_ID,ORDERNO) Q WHERE Q.QMS_ID = A.QMS_ID) > 1 THEN 'N' ELSE 'Y' END AS QMS_SPLIT_YN
		  FROM (SELECT ORDERNO,LINE_NO ,ITEM_CD,ORDERTY , CUST_PO, CUST_NM, 
		    CONCAT(CONCAT(CONCAT(CONCAT(SUBSTRING(ORDER_DT, 0,4), '-'), SUBSTRING(ORDER_DT, 5, 2)), '-'), SUBSTRING(ORDER_DT, 7, 2)) AS ORDER_DT, 
		    CONCAT(CONCAT(CONCAT(CONCAT(SUBSTRING(ACTUAL_SHIP_DT, 0,4), '-'), SUBSTRING(ACTUAL_SHIP_DT, 5, 2)), '-'), SUBSTRING(ACTUAL_SHIP_DT, 7, 2)) AS ACTUAL_SHIP_DT,
		    SHIPTO_NM, RTRIM(CONCAT(ADD1, ADD2)) AS ADDR, ITEM_DESC, LOTN, ORDER_QTY, UNIT, SALESREP_NM
		  FROM qms_salesorder SO) XX 
		      ,QMS_ORD_MAST A
		      ,QMS_ORD_DETL B
		 WHERE A.QMS_ID   = B.QMS_ID
		   AND A.QMS_SEQ  = B.QMS_SEQ
		   AND B.ORDERNO  = XX.ORDERNO
		   AND B.LINE_NO  = XX.LINE_NO
		   AND A.QMS_ID   = #{qmsId}
		   AND A.QMS_SEQ  = #{qmsSeq}
	</select>









/* *********** FIREPROOF CONSTRUCTION TYPE : List<Map<String, Object>> getQmsFireproofList = orderSvc.getQmsFireproofList(params); *********** */


/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\svc\OrderSvc.java *********** */


2220    /**
     * QMS 오더 내화구조 입력 목록
     * @작성일 : 2021. 5. 3.
     * @작성자 : jsh
     */
    public List<Map<String, Object>> getQmsFireproofList(Map<String, Object> params){
        
        List<Map<String, Object>> qmsPopList = qmsOrderDao.getQmsFireproofList(params);
        return qmsPopList;
    }




/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\java\com\limenets\eorder\dao\QmsOrderDao.java *********** */


134    public List<Map<String, Object>> getQmsFireproofList(Map<String, Object> svcMap) {
        return sqlSession.selectList("eorder.o_qmsorder.getQmsFireproofList", svcMap);
    }





/* *********** C:\GitHub\Knauf_Eorder_NEW\src\main\resources\sql\mssql\o_qmsorder.xml *********** */


786	<select id="getQmsFireproofList" parameterType="hashmap" resultType="hashmap">
		/* eorder.o_qmsorder.getQmsFireproofList */
		SELECT A.KEYCODE
		      ,A.FIREPROOFTYPE
		      ,A.FIRETIME
		      ,A.FILENAME
		      ,CEILING((SELECT COUNT(*) FROM O_FIREPROOFMASTER F WHERE F.FIRETIME = A.FIRETIME AND F.ACTIVE = 'Y' ) / 4) AS ROWSPAN_CNT
		      ,ROW_NUMBER() OVER (PARTITION BY A.FIRETIME ORDER BY A.KEYCODE ASC) AS RNUM
		      ,ROW_NUMBER() OVER (ORDER BY A.KEYCODE ASC) AS RCNT
		      ,(SELECT COUNT(F.FIRETIME) FROM O_FIREPROOFMASTER F WHERE F.ACTIVE = 'Y') AS RLAST
		      ,CASE WHEN DENSE_RANK() OVER (PARTITION BY A.FIRETIME ORDER BY A.KEYCODE DESC) = 1 THEN 'Y' ELSE 'N' END AS LAST_YN
              ,CASE WHEN (B.KEYCODE IS NOT NULL AND B.DELETEYN='N') THEN 'Y' ELSE 'N' END AS CHK_YN
		  FROM O_FIREPROOFMASTER A
          LEFT OUTER JOIN QMS_ORD_FRCN B
            ON A.KEYCODE = B.KEYCODE
           AND B.QMS_ID  = #{qmsId}
           AND B.QMS_SEQ = #{qmsSeq}
		 WHERE A.ACTIVE = 'Y'
		 ORDER BY A.FIRETIME,A.DISPLAYORDER
	</select>

























































